package com.sit.configHelper;

import com.sit.config.liquibase.AsyncSpringLiquibase;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import liquibase.database.Database;
import liquibase.database.DatabaseFactory;
import liquibase.database.jvm.JdbcConnection;
import liquibase.exception.LiquibaseException;
import liquibase.integration.spring.SpringLiquibase;
import org.hibernate.engine.jdbc.connections.spi.AbstractDataSourceBasedMultiTenantConnectionProviderImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationListener;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.sql.DataSource;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by colem on 1/4/2017.
 */
@Component
@Transactional
@EnableAspectJAutoProxy(proxyTargetClass = true)
public class MultiTenantConnectionProviderImplZM extends AbstractDataSourceBasedMultiTenantConnectionProviderImpl implements ApplicationListener<ContextRefreshedEvent> {
    private final static Logger LOGGER = LoggerFactory.getLogger(MultiTenantConnectionProviderImplZM.class);

    private Map<String, DataSource> map; // map holds the companyKey => DataSource


    @Value("${spring.datasource.url}")
    private String url;

    @Value("${spring.datasource.dataSourceClassName}")
    private String dataSourceClassName;

    @Value("${spring.datasource.username}")
    private String user;

    @Value("${spring.datasource.password}")
    private String password;

    @Inject
    private DataSource dataSource; // injected here to get properties and to provide default.

    @PostConstruct
    public void load() {
        map = new HashMap<>();
    }

    public void init() {

        //don't get list of companies from database because that causes circular reference, just hardcode for now.
        final List<String> providerNames = new ArrayList<String>();
        providerNames.add("sit");
        providerNames.add("sit1");
        providerNames.add("sit2");

        for (final String providerName : providerNames) {
            try {
                String companyDbUrl = url.replace(this.databaseNameFromJdbcUrl(url), providerName);
                LOGGER.debug("Configuring datasource {} {} {}", dataSourceClassName, companyDbUrl, user);
                HikariConfig config = new HikariConfig();
                config.setDataSourceClassName(dataSourceClassName);
                config.addDataSourceProperty("url", companyDbUrl);
                config.addDataSourceProperty("user", user);
                config.addDataSourceProperty("password", password);
                HikariDataSource ds = new HikariDataSource(config);
                map.put(providerName, ds);
                initDbWithLiquibase(ds);

            } catch (Exception e) {
                LOGGER.error("Error in database URL {}", url, e);
            }
        }


//        for (Company company : companyRepository.findAll()) {
//            // in this experiment we are just using one instance of mysql. URL is generated by replacing master database
//            // name with company key to get new database URL
//            try {
//                String companyDbUrl = url.replace(this.databaseNameFromJdbcUrl(url), company.getCompanyDbname());
//                LOGGER.debug("Configuring datasource {} {} {}", dataSourceClassName, companyDbUrl, user);
//                HikariConfig config = new HikariConfig();
//                config.setDataSourceClassName(dataSourceClassName);
//                config.addDataSourceProperty("url", companyDbUrl);
//                config.addDataSourceProperty("user", user);
//                config.addDataSourceProperty("password", password);
//                HikariDataSource ds = new HikariDataSource(config);
//                map.put(company.getCompanyDbname(), ds);
//                initDbWithLiquibase(ds);
//            } catch (Exception e) {
//                LOGGER.error("Error in database URL {}", url, e);
//            }
//        }
    }

    private void initDbWithLiquibase(HikariDataSource ds) throws SQLException, LiquibaseException {
        LOGGER.debug("######### INIT DB WITH LIQUIDBASE FOR:" + ds.toString());

       Database database = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(
            new JdbcConnection(ds.getConnection()));
//        Liquibase liquibase = new Liquibase("classpath:config/liquibase/master.xml", new ClassLoaderResourceAccessor(), database);
//        liquibase.update("dev");


        SpringLiquibase liquibase = new AsyncSpringLiquibase();
        liquibase.setDataSource(ds);
        liquibase.setChangeLog("classpath:config/liquibase/master.xml");
        liquibase.setContexts("dev");
     //   liquibase.setDefaultSchema(liquibaseProperties.getDefaultSchema());
        liquibase.setDropFirst(false);

        liquibase.setShouldRun(true);
        LOGGER.debug("Configuring Liquibase for tenant");
    }

    @Override
    protected DataSource selectAnyDataSource() {
        LOGGER.debug("######### Selecting any data source");
        //return dataSource;
        //injected default datasource is not working, just create one from scratch to see if it works

      //  String companyDbUrl = url.replace(this.databaseNameFromJdbcUrl(url), providerName);
        LOGGER.debug("Configuring datasource {} {} {}", dataSourceClassName, url, user);
        HikariConfig config = new HikariConfig();
        config.setDataSourceClassName(dataSourceClassName);
        config.addDataSourceProperty("url", url);
        config.addDataSourceProperty("user", user);
        config.addDataSourceProperty("password", password);
        HikariDataSource ds = new HikariDataSource(config);
LOGGER.debug("returning datasource");
       return ds;
    }

    @Override
    protected DataSource selectDataSource(String tenantIdentifier) {
        LOGGER.debug("+++++++++++ Selecting data source for tenant Id of: {}", tenantIdentifier);
        return map.containsKey(tenantIdentifier) ? map.get(tenantIdentifier) : dataSource ;
    }

    @Override
    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
        // This is super critical to initialize after application is done with configuring beans.
        // otherwise you can not use companyRepository to fetch all the companies
        init();
    }

    public static String databaseNameFromJdbcUrl(String url) {
        try {
            URI uri = new URI(url.replace("jdbc:", ""));
            return uri.getPath().substring(1);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }
    // TODO: add methods to add the datasources as companies are registered.
}
